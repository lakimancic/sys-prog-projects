1 & 2

Web server implementirati kao konzolnu aplikaciju koja loguje sve primljene zahteve i informacije o
njihovoj obradi (da li je došlo do greške, da li je zahtev uspešno obrađen i ostale ključe detalje).
Web server treba da kešira u memoriji odgovore na primljene zahteve, tako da u slučaju da stigne
isti zahtev, prosleđuje se već pripremljeni odgovor. Kao klijentsku aplikaciju možete koristiti Web
browser ili možete po potrebi kreirati zasebnu konzolnu aplikaciju. Za realizaciju koristiti funkcije
iz biblioteke System.Threading, uključujući dostupne mehanizme za sinhronizaciju i zaključavanje.
Dozvoljeno je korišćenje ThreadPool.

Prvi projekta pokriva temu višenitnog programiranja korišćenjem .NET Framework-a. Za izradu
projekta treba korstiti C# programski jezik. Rezultate projekta treba predati u obliku Visual Studio
projekta koji je postavljen na GitHub repozitorijumu. Rezultate projekta možete predati
korišćenjem foruma na sajtu predmeta.

Kreirati Web server koji klijentu omogućava pretraživanje pesama uz pomoć Spotify API-a.
Pretraga pesama se može vršiti pomoću filtera koji se definišu u okviru query-a. Spisak pesama
koje zadovoljavaju kriterijum se vraćaju kao odgovor klijentu (umesto spiska pesama je moguće
vratiti spisak albuma). Svi zahtevi serveru se šalju preko browser-a korišćenjem GET metode.
Ukoliko navedena pesma ne postoji, prikazati grešku klijentu.
Način funkcionisanja Spotify API- a je moguće proučiti na sledećem linku:
https://developer.spotify.com/documentation/web- api/reference/search
Primer poziva serveru:
https://api.spotify.com/v1/search?q=Taylor+Swift&type=album&limit=5&access_token=token

Za drugi projekat timovi treba da implementiraju isti zadatak koji su imali za prvi projekat, 
uz izmenu da sada treba koristiti taskove i asinhrone operacije (tamo gde to ima smisla). 
Za obradu kod koje taskovi nemaju smisla treba zadržati klasične niti. Dozvoljeno je korišćenje 
mehanizama za međusobno zaključavanje i sinhronizaciju. Rezultate projekta treba predati u obliku 
Visual Studio projekta koji je postavljen na GitHub repozitorijumu.

3

Zadatak 10:
Koristeći principe Reaktivnog programiranja i Yelp Fusion API, implementirati aplikaciju za
prikaz komentara za određene restorane (moguće je proslediti identifikatore restorana). Za
prikupljene komentare implementirati Topic Modeling koristeći SharpEntropy biblioteku.
Prikazati dobijene rezultate.
Dokumentacija dostupna na linku: https://docs.developer.yelp.com/